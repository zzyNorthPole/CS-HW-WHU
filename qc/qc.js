qc.reset(2 + 2 + 4 + 4 + 1 + 1);

var a = qint.new(2, "a");
var b = qint.new(2, "b");
var result = qint.new(4, "result");
var aluop = qint.new(4, "aluop");
var zero = qint.new(1, "zero");
var reg = qint.new(1, "reg");

a.write(1);
b.write(1);
aluop.write(3);
result.write(0);
zero.write(0);

//a 0x1 0x2
//b 0x4 0x8
//aluop 0x100 0x200 0x400 0x800
//result 0x10 0x20 0x40 0x80
//zero 0x1000

//add 0000 sub 0001
//mul 0010 sar 0011
//and 0100 or 0101
//not 0110 xor 0111

//beq 1000 bne 1001
//blt 1010 bge 1011

//add
aluop.not(0x1 | 0x2 | 0x4 | 0x8);

qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x10 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x10 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x10);
qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x1);

qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x2);


qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x4 | 0x10 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x4 | 0x10 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x4 | 0x10);
qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x4);


qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x8 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x8 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x8);

aluop.not(0x1 | 0x2 | 0x4 | 0x8);

//sub 
aluop.not(0x2 | 0x4 | 0x8);


qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x10 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x10 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x10);
qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x1);


qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x2);

qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x4);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x4 | 0x10);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x4 | 0x10 | 0x20);
qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x4 | 0x10 | 0x20 | 0x40);

qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x8);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x8 | 0x20);
qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x8 | 0x20 | 0x40);

aluop.not(0x2 | 0x4 | 0x8);

//mul
aluop.not(0x1 | 0x4 | 0x8);

qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x4 | 0x10 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x4 | 0x10 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x4 | 0x10);
qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x4);

qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x4 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x4 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x4);

qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x8 | 0x20 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x8 | 0x20);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x8);

qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x8 | 0x40);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x8);

aluop.not(0x1 | 0x4 | 0x8);

//sar
aluop.not(0x4 | 0x8);

reg.write(0);
qc.cnot(0x2000, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x1);
qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x2000 | 0x4);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x2000 | 0x4);
aluop.not(0x4 | 0x8);

//and
aluop.not(0x1 | 0x2 | 0x8);

qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x4);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x8);

aluop.not(0x1 | 0x2 | 0x8);

//or
aluop.not(0x2 | 0x8);

qc.cnot(0x1 | 0x4, 0x100 | 0x200 | 0x400 | 0x800);
qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x1 | 0x4);
qc.cnot(0x1 | 0x4 | 0x10, 0x100 | 0x200 | 0x400 | 0x800);

qc.cnot(0x2 | 0x8, 0x100 | 0x200 | 0x400 | 0x800);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x2 | 0x8);
qc.cnot(0x2 | 0x8 | 0x20, 0x100 | 0x200 | 0x400 | 0x800);

aluop.not(0x2 | 0x8);

//not
aluop.not(0x1 | 0x8);

qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x1);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x2);

aluop.not(0x1 | 0x8);

//xor
aluop.not(0x8);

qc.cnot(0x10, 0x100 | 0x200 | 0x400 | 0x800 | 0x1);
qc.cnot(0x20, 0x100 | 0x200 | 0x400 | 0x800 | 0x2);
qc.cnot(0x40, 0x100 | 0x200 | 0x400 | 0x800 | 0x4);
qc.cnot(0x80, 0x100 | 0x200 | 0x400 | 0x800 | 0x8);

aluop.not(0x8);

//branch
qc.cnot(0x80, 0x800 | 0x1 | 0x10 | 0x20 | 0x40);
qc.cnot(0x40, 0x800 | 0x1 | 0x10 | 0x20);
qc.cnot(0x20, 0x800 | 0x1 | 0x10);
qc.cnot(0x10, 0x800 | 0x1);

qc.cnot(0x80, 0x800 | 0x2 | 0x20 | 0x40);
qc.cnot(0x40, 0x800 | 0x2 | 0x20);
qc.cnot(0x20, 0x800 | 0x2);

qc.cnot(0x10, 0x800 | 0x4);
qc.cnot(0x20, 0x800 | 0x4 | 0x10);
qc.cnot(0x40, 0x800 | 0x4 | 0x10 | 0x20);
qc.cnot(0x80, 0x800 | 0x4 | 0x10 | 0x20 | 0x40);

qc.cnot(0x20, 0x800 | 0x8);
qc.cnot(0x40, 0x800 | 0x8 | 0x20);
qc.cnot(0x80, 0x800 | 0x8 | 0x20 | 0x40);

//beq
aluop.not(0x1 | 0x2 | 0x4);

qc.cnot(0x10 | 0x20 | 0x40 | 0x80, 0x100 | 0x200 | 0x400 | 0x800);
qc.cnot(0x1000, 0x100 | 0x200 | 0x400 | 0x800 | 0x10 | 0x20 | 0x40 | 0x80);
qc.cnot(0x10 | 0x20 | 0x40 | 0x80, 0x100 | 0x200 | 0x400 | 0x800);

aluop.not(0x1 | 0x2 | 0x4);

//bne
aluop.not(0x2 | 0x4);

qc.cnot(0x10 | 0x20 | 0x40 | 0x80, 0x100 | 0x200 | 0x400 | 0x800);
qc.cnot(0x1000, 0x100 | 0x200 | 0x400 | 0x800);
qc.cnot(0x1000, 0x100 | 0x200 | 0x400 | 0x800 | 0x10 | 0x20 | 0x40 | 0x80);
qc.cnot(0x10 | 0x20 | 0x40 | 0x80, 0x100 | 0x200 | 0x400 | 0x800);

aluop.not(0x2 | 0x4);

//ble
aluop.not(0x1 | 0x4);

qc.cnot(0x1000, 0x100 | 0x200 | 0x400 | 0x800 | 0x80);

aluop.not(0x1 | 0x4);

//bge
aluop.not(0x4);

qc.cnot(0x1000, 0x100 | 0x200 | 0x400 | 0x800 | 0x80);
qc.cnot(0x1000, 0x100 | 0x200 | 0x400 | 0x800);
aluop.not(0x4);

qc.print(result.read() + '\n');
qc.print(zero.read() + '\n');